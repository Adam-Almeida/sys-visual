// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id       @default(uuid())
  username    String      
  password    String      
  email       String      @unique
  lastAcess   DateTime    @default(now())
  roleType    Role

  customer    Customer?

  @@map("user")
}

enum Role {
  USER              //FUNCIONÁRIOS DE PRODUÇÃO
  ADMIN              //SUPER ADMIN
  CLIENT             //CLIENTES
}

model Customer{
  id          String @id    @default(uuid())
  name        String
  document    String @unique
  email       String
  type        incType
  phone       String?
  whats       String
  status      Boolean  @default(true)

  user_id     String   @unique
  user        User     @relation(fields: [user_id], references: [id]) 

  address     Address?
  invoice     Invoice[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("customer")
}

enum incType {
  NATURAL_PERSON
  LEGAL_PERSON
}

model Address{
  id            String @id @default(uuid())
  cep           Int
  street        String
  number        String
  city          String
  neighborhood  String
  uf            String

  id_customer   String    @unique
  customer      Customer  @relation(fields: [id_customer], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("address")
}

model FeedstockType {
id            String @id @default(uuid())
name          String
slug          String @unique
createdAt     DateTime  @default(now())
updatedAt     DateTime  @updatedAt

@@map("feedstockType")
}

model Stock {
id                String @id @default(uuid())
name              String
slug              String @unique
type              String
qtd               Float
lose_per_meter    Float
grammage          Int
base_price        Float
description       String
notify_storage    Boolean

invoice           Invoice[]

createdAt         DateTime  @default(now())
updatedAt         DateTime  @updatedAt

@@map("stock")
}

model Invoice{
  id                String @id @default(uuid())
  status            InvoiceStatus @default(NEW)
  customer_name     String
  stock_media_name  String
  qtd               Int
  comp              Float
  alt               Float
  price             Float
  file              String
  payment_signal    Float
  payment_type      String
  total_value       Float
  total_meters      Float

  id_stock_media    String     
  stock             Stock      @relation(fields: [id_stock_media], references: [id])

  id_customer       String    
  customer          Customer  @relation(fields: [id_customer], references: [id])

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
@@map("invoice")
}

enum InvoiceStatus {
  PRODUCTION
  AVAILABLE
  NEW
  URGENT
  FINISHED
}

